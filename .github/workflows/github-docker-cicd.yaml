name: Github-Docker Hub MLOps pipeline - Kamila

env:
  DOCKER_USER: ${{secrets.DOCKER_USER}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  REPO_NAME: ${{secrets.REPO_NAME}}

# Déclenchement du pipeline :
# - À chaque push sur la branche "main"
# - À chaque pull request vers la branche "main"
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Définition des jobs CI/CD :
jobs:

  ci_pipeline: 
    runs-on: ubuntu-latest  # Utilisation de la dernière version d'Ubuntu pour exécuter le job
    
    steps:
      # Étape 1 : Récupérer le code du dépôt GitHub
      - uses: actions/checkout@v1 
        with:
          fetch-depth: 0  # Récupère tout l'historique des commits

      # Étape 2 : Installer Python 3.9
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      # Étape 3 : Installer les dépendances du projet
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Mise à jour de pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi  # Installer les dépendances si le fichier requirements.txt existe

      # Étape 4 : Vérifier le formatage du code avec Black
      - name: Vérification du formatage avec Black
        run: |
          pip install black  # Installer Black
          black --check .  # Vérifier si le code est bien formaté

      # Étape 5 : Vérifier les erreurs de style avec Flake8
      - name: Vérification du style de code avec Flake8
        run: |
          pip install flake8  # Installer Flake8
          flake8 .  # Analyser tout le projet et afficher les erreurs de style

      # Étape 6 : Exécuter les tests unitaires avec Pytest
      - name: Exécution des tests unitaires avec Pytest
        run: |
          pip install pytest  # Installer pytest si besoin
          pytest  # Lancer les tests unitaires

  cd_pipeline:
    runs-on: ubuntu-latest 
    needs: [ci_pipeline]  # Exécute ce job uniquement si le job ci_pipeline réussit

    steps:
      # Étape 1 : Récupérer le code
      - uses: actions/checkout@v2 

      # Étape 2 : Connexion à Docker Hub
      - name: docker login
        run: | 
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  
      # Étape 3 : Récupérer la date actuelle pour taguer l'image Docker
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      # Étape 4 : Construire l'image Docker
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}

      # Étape 5 : Pousser l'image Docker sur Docker Hub
      - name: Docker Push
        run: docker push $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}
