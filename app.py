import streamlit as st
import mlflow
import mlflow.sklearn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import io

# Configuration de la page
st.set_page_config(
    page_title="Application de Pr√©diction de D√©faut",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fonction pour charger les exp√©riences MLflow
def load_mlflow_experiments(experiment_type):
    """Charger les donn√©es MLflow pour un type d'exp√©rience sp√©cifique"""
    # Dans un cas r√©el, utilisez mlflow.search_runs() avec les bons filtres
    # Exemple: runs = mlflow.search_runs(filter_string=f"tags.experiment_type = '{experiment_type}'")
    
    # Pour la d√©monstration, on cr√©e des donn√©es factices
    if experiment_type == "logistic_regression":
        return {
            "params": {
                "solver": "liblinear",
                "max_iter": 100
            },
            "metrics": {
                "accuracy": 0.85,
                "precision": 0.84,
                "recall": 0.85,
                "f1_score": 0.84
            },
            "artifacts": {
                "confusion_matrix": np.array([[850, 150], [200, 800]]),
                "model_path": "runs:/logistic_regression_model/model"
            }
        }
    elif experiment_type == "random_forest":
        return {
            "params": {
                "n_estimators": 100,
                "random_state": 42
            },
            "metrics": {
                "accuracy": 0.89,
                "precision": 0.88,
                "recall": 0.89,
                "f1_score": 0.88
            },
            "artifacts": {
                "confusion_matrix": np.array([[900, 100], [150, 850]]),
                "model_path": "runs:/random_forest_model/model"
            }
        }

# Fonction pour charger un mod√®le MLflow
def load_model(model_path):
    """
    Charge un mod√®le MLflow √† partir de son chemin
    
    Dans un environnement r√©el, utilisez:
    return mlflow.sklearn.load_model(model_path)
    """
    # Pour la d√©mo, on retourne un mod√®le factice
    if "logistic_regression" in model_path:
        from sklearn.linear_model import LogisticRegression
        return LogisticRegression()
    else:
        from sklearn.ensemble import RandomForestClassifier
        return RandomForestClassifier()

# Fonction pour faire une pr√©diction
def predict(model, features):
    """Effectue une pr√©diction avec le mod√®le choisi"""
    # Conversion des valeurs en float
    features_float = [float(val) for val in features]
    # Cr√©ation d'un DataFrame avec les bonnes colonnes
    feature_df = pd.DataFrame([features_float], columns=[
        'credit_lines_outstanding', 'loan_amt_outstanding', 
        'total_debt_outstanding', 'income', 
        'years_employed', 'fico_score'
    ])
    
    # Dans un environnement r√©el, utilisez:
    # return model.predict(feature_df)[0], model.predict_proba(feature_df)[0][1]
    
    # Pour la d√©mo, on simule une pr√©diction bas√©e sur le score FICO
    if features_float[5] > 700:  # FICO score
        return 0, 0.15  # Non d√©faut, probabilit√© de d√©faut de 15%
    else:
        return 1, 0.75  # D√©faut, probabilit√© de d√©faut de 75%

# Fonction pour cr√©er un plot de matrice de confusion
def plot_confusion_matrix(cm):
    fig, ax = plt.subplots(figsize=(6, 5))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax)
    plt.xlabel('Pr√©diction')
    plt.ylabel('Valeur r√©elle')
    plt.title('Matrice de Confusion')
    ax.set_xticklabels(['Non d√©faut', 'D√©faut'])
    ax.set_yticklabels(['Non d√©faut', 'D√©faut'])
    
    return fig

# Fonction pour cr√©er un graphique de m√©triques
def plot_metrics(metrics):
    metrics_df = pd.DataFrame(list(metrics.items()), columns=['M√©trique', 'Valeur'])
    
    fig, ax = plt.subplots(figsize=(8, 4))
    sns.barplot(x='M√©trique', y='Valeur', data=metrics_df, ax=ax)
    plt.ylim(0, 1)
    plt.title('M√©triques de Performance')
    
    return fig

# Navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("S√©lectionnez une page", ["R√©gression Logistique", "Random Forest", "Pr√©diction"])

# Page 1: R√©gression Logistique
if page == "R√©gression Logistique":
    st.title("üîç Visualisation des r√©sultats de la R√©gression Logistique")
    
    # Chargement des donn√©es MLflow
    lr_data = load_mlflow_experiments("logistic_regression")
    
    # Affichage des hyperparam√®tres
    st.header("Hyperparam√®tres")
    st.write(pd.DataFrame(lr_data["params"].items(), columns=["Param√®tre", "Valeur"]))
    
    # Affichage des m√©triques
    st.header("M√©triques de performance")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(pd.DataFrame(lr_data["metrics"].items(), columns=["M√©trique", "Valeur"]))
    
    with col2:
        metrics_fig = plot_metrics(lr_data["metrics"])
        st.pyplot(metrics_fig)
    
    # Matrice de confusion
    st.header("Matrice de confusion")
    cm_fig = plot_confusion_matrix(lr_data["artifacts"]["confusion_matrix"])
    st.pyplot(cm_fig)
    
    # Informations suppl√©mentaires
    st.header("Informations suppl√©mentaires")
    st.write("""
    Ce mod√®le de r√©gression logistique a √©t√© entra√Æn√© pour pr√©dire la probabilit√© de d√©faut de paiement 
    d'un client en fonction de diverses caract√©ristiques financi√®res. La r√©gression logistique est 
    particuli√®rement adapt√©e pour les probl√®mes de classification binaire comme celui-ci.
    """)

# Page 2: Random Forest
elif page == "Random Forest":
    st.title("üå≤ Visualisation des r√©sultats du Random Forest")
    
    # Chargement des donn√©es MLflow
    rf_data = load_mlflow_experiments("random_forest")
    
    # Affichage des hyperparam√®tres
    st.header("Hyperparam√®tres")
    st.write(pd.DataFrame(rf_data["params"].items(), columns=["Param√®tre", "Valeur"]))
    
    # Affichage des m√©triques
    st.header("M√©triques de performance")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(pd.DataFrame(rf_data["metrics"].items(), columns=["M√©trique", "Valeur"]))
    
    with col2:
        metrics_fig = plot_metrics(rf_data["metrics"])
        st.pyplot(metrics_fig)
    
    # Matrice de confusion
    st.header("Matrice de confusion")
    cm_fig = plot_confusion_matrix(rf_data["artifacts"]["confusion_matrix"])
    st.pyplot(cm_fig)
    
    # Informations suppl√©mentaires
    st.header("Informations suppl√©mentaires")
    st.write("""
    Le mod√®le Random Forest est un ensemble de 100 arbres de d√©cision qui ont √©t√© entra√Æn√©s pour 
    pr√©dire la probabilit√© de d√©faut de paiement. Les mod√®les d'ensemble comme Random Forest sont 
    souvent plus robustes et peuvent capturer des relations non lin√©aires complexes dans les donn√©es.
    """)

# Page 3: Pr√©diction
else:
    st.title("üîÆ Pr√©diction de d√©faut de paiement")
    
    # S√©lection du mod√®le
    model_type = st.selectbox(
        "S√©lectionnez le mod√®le √† utiliser",
        ["R√©gression Logistique", "Random Forest"]
    )
    
    # Chargement du mod√®le s√©lectionn√©
    if model_type == "R√©gression Logistique":
        model_path = load_mlflow_experiments("logistic_regression")["artifacts"]["model_path"]
    else:
        model_path = load_mlflow_experiments("random_forest")["artifacts"]["model_path"]
    
    model = load_model(model_path)
    
    # Formulaire de saisie des caract√©ristiques
    st.header("Saisie des caract√©ristiques du client")
    
    col1, col2 = st.columns(2)
    
    with col1:
        credit_lines = st.number_input("Nombre de lignes de cr√©dit", min_value=0, value=3)
        loan_amt = st.number_input("Montant du pr√™t en cours ($)", min_value=0, value=15000)
        total_debt = st.number_input("Dette totale ($)", min_value=0, value=35000)
    
    with col2:
        income = st.number_input("Revenu annuel ($)", min_value=0, value=60000)
        years_employed = st.number_input("Ann√©es d'emploi", min_value=0.0, value=5.0)
        fico_score = st.number_input("Score FICO", min_value=300, max_value=850, value=680)
    
    # Bouton de pr√©diction
    if st.button("Faire une pr√©diction"):
        features = [credit_lines, loan_amt, total_debt, income, years_employed, fico_score]
        prediction, proba = predict(model, features)
        
        st.header("R√©sultat de la pr√©diction")
        
        # Affichage du r√©sultat avec un indicateur visuel
        col1, col2 = st.columns(2)
        
        with col1:
            if prediction == 0:
                st.success("‚úÖ Non d√©faut de paiement pr√©dit")
            else:
                st.error("‚ùå D√©faut de paiement pr√©dit")
            
            st.write(f"Probabilit√© de d√©faut: {proba:.2%}")
        
        with col2:
            # Graphique de probabilit√©
            fig, ax = plt.subplots(figsize=(5, 3))
            
            # Cr√©ation d'une jauge de risque
            categories = ['Faible', 'Moyen', '√âlev√©']
            colors = ['green', 'orange', 'red']
            bounds = [0, 0.3, 0.7, 1.0]
            
            plt.barh(categories, [0.3, 0.4, 0.3], color=colors, alpha=0.3)
            plt.barh([''], [proba], left=0, color='blue', height=0.3)
            
            # Ajout d'un marqueur pour la probabilit√©
            plt.axvline(x=proba, color='blue', linestyle='-', alpha=0.7)
            plt.text(proba, 0, f"{proba:.2%}", color='blue', fontweight='bold')
            
            plt.xlim(0, 1)
            plt.title('Niveau de risque')
            plt.xticks([0, 0.25, 0.5, 0.75, 1], ['0%', '25%', '50%', '75%', '100%'])
            
            st.pyplot(fig)
        
        # Informations explicatives
        st.header("Facteurs influen√ßant la pr√©diction")
        
        if model_type == "Random Forest" and fico_score < 700:
            st.write("""
            Le score FICO est l'un des facteurs les plus importants dans cette pr√©diction. 
            Un score inf√©rieur √† 700 est g√©n√©ralement associ√© √† un risque de d√©faut plus √©lev√©.
            """)
        elif total_debt > income * 0.5:
            st.write("""
            Le ratio dette/revenu est √©lev√© (plus de 50% du revenu annuel), 
            ce qui est g√©n√©ralement un indicateur de risque de d√©faut.
            """)
        else:
            st.write("""
            Plusieurs facteurs ont contribu√© √† cette pr√©diction, notamment la combinaison du score FICO, 
            du montant de la dette et des ann√©es d'emploi.
            """)

# Footer
st.sidebar.markdown("---")
st.sidebar.info(
    "Cette application d√©montre l'utilisation de MLflow pour le suivi et le d√©ploiement "
    "de mod√®les de pr√©diction de d√©faut de paiement."
)